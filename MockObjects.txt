Mock objects are stand-ins that are used to isolate behavior. Let's say you're writing a spec to test method blah. But method blah will often call other methods to do its work, so your test is actually testing blah plus all those other methods, since if any breaks chances are that blah will break. That means when your test for blah fails, you don't really know where the problem is -- is it in blah, or is it in some other method that blah calls? That's where mocks come in. You can use mocks to stub out those other methods that blah relies on and have the stubs return known values, so that your test can ensure that blah behaves a certain way when the methods return specific values.
And you can change the values too, so you can test blah in a variety of situations -- what happens when one of those other methods raises an error? or returns nil? or whatever.
The rspec mocks will also let you test interaction between methods. So you can make sure that when blah calls another method, it does so appropriately -- passing the correct arguments, etc.